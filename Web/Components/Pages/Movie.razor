@page "/movie/{Id:int}"
@using DatabaseInteraction
@using Microsoft.EntityFrameworkCore
@using MovieProcessor
@using Web.Components.Misc
@using Web.OMDBModel
@attribute [StreamRendering(true)]
@inject HttpClient HttpClient

@if (_movie is null)
{
    <LoadingCircle/>
}
else
{
    <div class="movie-header-display">
        @if (MovieData is not null && MovieData.Poster != "N/A")
        {
            <img class="movie-image" src="@MovieData.Poster" alt="">
        }
        else
        {
            <div></div>
        }
        <div class="movie-header-title-description">
            <span class="movie-name"> @_movie.PrimaryTitle </span>
            <br/>
            <span class="rating-name">Rating: </span> <span class="rating-digits">@_movie.Rating</span>
            <br/>
            <span class="movie-description"> @MovieData?.Plot </span>
        </div>
    </div>


    <h1> Cast </h1>

    <div class="titled-list">
        <span class="movie-section-title"> Actors </span>
        <div class="actors-list">
            @foreach (var actor in _movie.GetActors(_context))
            {
                <a href=@($"/person/{actor.PersonId}")> @actor.PrimaryName </a>
            }
        </div>
    </div>
    <div class="titled-list">
        <span class="movie-section-title"> Directors </span>
        <div class="directors-list">
            @foreach (var actor in _movie.GetDirectors(_context))
            {
                <a href=@($"/person/{actor.PersonId}")> @actor.PrimaryName </a>
            }
        </div>
    </div>

    @if (_movie.GetTags(_context).Any())
    {
        <h1> Tags </h1>
        <div class="tag-list">
            @foreach (var tag in _movie.GetTags(_context))
            {
                <a class="tag-link" href=@($"/tag/{tag.TagId}") style="background-color: @Tags.GetTagColor(tag.TagId)"> @tag.Name </a>
            }
        </div>
    }

    <h1> Similar movies </h1>

    @if (_similar is null)
    {
        <LoadingCircle/>
    }
    else
    {
        <div class="similar-list">
            @foreach (var kvp in _similar.Take(10))
            {
                <MovieEntry Entry=@kvp.Value/>
            }
        </div>
    }
}

@code {
    [Parameter]
    public int? Id { get; set; }

    private ApplicationContext _context = DbFactory.GetContext();
    private DatabaseInteraction.Movie? _movie;
    private List<KeyValuePair<float, DatabaseInteraction.Movie>>? _similar;
    private MovieData? MovieData { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _movie = await _context.Movies.FindAsync(Id);
        if (_movie is null) return;
        StateHasChanged();
        var movieData = HttpClient.GetFromJsonAsync<MovieData>($"https://www.omdbapi.com/?i=tt{_movie.MovieId:0000000}&apikey=6cb57100");
        MovieData = await movieData;
        StateHasChanged();
        _similar = await FindSimilar();
        StateHasChanged();
    }

    private async Task<List<KeyValuePair<float, DatabaseInteraction.Movie>>> FindSimilar()
    {
        var candidates = Similarity.similarityCandidates(_context, _movie);
        var similarities = candidates.Select(c => new KeyValuePair<float, DatabaseInteraction.Movie>(Similarity.similarity(_context, _movie, c), c));
        var simList = await similarities.ToListAsync();
        return simList.OrderByDescending(c => c.Key).ToList();
    }
}